"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[165],{5893:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"What is Signux?","href":"/signux/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Getting Started","href":"/signux/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"category","label":"Primitives","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"State","href":"/signux/docs/primitives/state","docId":"primitives/state","unlisted":false},{"type":"link","label":"Event","href":"/signux/docs/primitives/event","docId":"primitives/event","unlisted":false},{"type":"link","label":"Computed","href":"/signux/docs/primitives/computed","docId":"primitives/computed","unlisted":false},{"type":"link","label":"Effect","href":"/signux/docs/primitives/effect","docId":"primitives/effect","unlisted":false},{"type":"link","label":"State Async","href":"/signux/docs/primitives/stateAsync","docId":"primitives/stateAsync","unlisted":false}],"href":"/signux/docs/category/primitives"},{"type":"category","label":"Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"How to use them?","href":"/signux/docs/operators/pipe","docId":"operators/pipe","unlisted":false},{"type":"link","label":"debounce","href":"/signux/docs/operators/debounce","docId":"operators/debounce","unlisted":false},{"type":"link","label":"filter","href":"/signux/docs/operators/filter","docId":"operators/filter","unlisted":false},{"type":"link","label":"map","href":"/signux/docs/operators/map","docId":"operators/map","unlisted":false},{"type":"link","label":"mapAsync","href":"/signux/docs/operators/mapAsync","docId":"operators/mapAsync","unlisted":false},{"type":"link","label":"merge","href":"/signux/docs/operators/merge","docId":"operators/merge","unlisted":false}],"href":"/signux/docs/category/operators"}]},"docs":{"getting-started":{"id":"getting-started","title":"Getting Started","description":"This guide walks you through the basics of using Signux \u2014 from creating reactive state to composing updates and deriving values.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"What is Signux?","description":"Signux is a minimal, fine-grained reactive system for JavaScript and TypeScript \u2014 composable, testable, and framework-agnostic.","sidebar":"docsSidebar"},"operators/debounce":{"id":"operators/debounce","title":"debounce","description":"The debounce operator delays the emission of values until after a pause in activity.","sidebar":"docsSidebar"},"operators/filter":{"id":"operators/filter","title":"filter","description":"The filter operator lets values through only when they pass a given test.","sidebar":"docsSidebar"},"operators/map":{"id":"operators/map","title":"map","description":"The map operator transforms each value from a reactive source into a new value.","sidebar":"docsSidebar"},"operators/mapAsync":{"id":"operators/mapAsync","title":"mapAsync","description":"The mapAsync operator transforms each value from a source into an asynchronous operation,","sidebar":"docsSidebar"},"operators/merge":{"id":"operators/merge","title":"merge","description":"The merge operator combines multiple reactive sources into a single stream.","sidebar":"docsSidebar"},"operators/pipe":{"id":"operators/pipe","title":"How to use them?","description":"Operators can be applied using the pipe() method. This method is available on all reactive sources in Signux (state, event, computed).","sidebar":"docsSidebar"},"primitives/computed":{"id":"primitives/computed","title":"Computed","description":"computed(fn: () => T)","sidebar":"docsSidebar"},"primitives/effect":{"id":"primitives/effect","title":"Effect","description":"effect(fn: () => void)","sidebar":"docsSidebar"},"primitives/event":{"id":"primitives/event","title":"Event","description":"event()","sidebar":"docsSidebar"},"primitives/state":{"id":"primitives/state","title":"State","description":"state(initialState?: T)","sidebar":"docsSidebar"},"primitives/stateAsync":{"id":"primitives/stateAsync","title":"State Async","description":"stateAsync(fetcher P) => Promise)","sidebar":"docsSidebar"}}}}')}}]);