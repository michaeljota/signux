"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[791],{3023:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(3696);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},5930:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"operators/pipe","title":"How to use them?","description":"Operators can be applied using the pipe() method. This method is available on all reactive sources in Signux (state, event, computed).","source":"@site/docs/operators/pipe.md","sourceDirName":"operators","slug":"/operators/pipe","permalink":"/signux/docs/operators/pipe","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Operators","permalink":"/signux/docs/category/operators"},"next":{"title":"debounce","permalink":"/signux/docs/operators/debounce"}}');var r=s(2540),i=s(3023);const o={sidebar_position:1},c="How to use them?",d={},l=[{value:"\u2705 Basic usage",id:"-basic-usage",level:2},{value:"\ud83d\udce6 Pipe result types",id:"-pipe-result-types",level:2},{value:"\u2699\ufe0f Creating custom operators",id:"\ufe0f-creating-custom-operators",level:2},{value:"\ud83e\udde9 Built-in operators",id:"-built-in-operators",level:2}];function a(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"how-to-use-them",children:"How to use them?"})}),"\n",(0,r.jsxs)(n.p,{children:["Operators can be applied using the ",(0,r.jsx)(n.code,{children:"pipe()"})," method. This method is available on all reactive sources in Signux (",(0,r.jsx)(n.code,{children:"state"}),", ",(0,r.jsx)(n.code,{children:"event"}),", ",(0,r.jsx)(n.code,{children:"computed"}),").",(0,r.jsx)(n.br,{}),"\n","It allows you to create new reactive flows by composing operators in a functional, readable way."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-basic-usage",children:"\u2705 Basic usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { event } from "signux";\nimport { map, filter } from "signux/operators";\n\nconst input = event<number>();\n\nconst even = input.pipe(\n  filter((n) => n % 2 === 0),\n  map((n) => n * 10),\n);\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["Note: operators are applied ",(0,r.jsx)(n.strong,{children:"in order"}),", from left to right \u2014 just like a function pipeline."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const result = input.pipe(opA, opB, opC);\n// equivalent to: opC(opB(opA(input)))\n"})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-pipe-result-types",children:"\ud83d\udce6 Pipe result types"}),"\n",(0,r.jsxs)(n.p,{children:["Depending on the source, ",(0,r.jsx)(n.code,{children:"pipe()"})," returns:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Source"}),(0,r.jsx)(n.th,{children:"Returns"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ReadonlyEvent<T>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"state"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComputedState<T>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"computed"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComputedState<T>"})})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["This ensures that ",(0,r.jsx)(n.code,{children:".pipe(...)"})," flows can be consumed like regular state when needed."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-creating-custom-operators",children:"\u2699\ufe0f Creating custom operators"}),"\n",(0,r.jsx)(n.p,{children:"Operators are pure functions with the following signature:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type OperatorFn<T, R = T> = (source: Subscribable<T>) => Event<R>;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can define your own, with the logic you want. You only need to subscribe to the source, and create another event to return it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const square: OperatorFn<number> = (source) => {\n  const out = event<number>();\n  source.subscribe((n) => out(n * n));\n  return out;\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-built-in-operators",children:"\ud83e\udde9 Built-in operators"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"map"})}),(0,r.jsx)(n.td,{children:"Transforms values"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filter"})}),(0,r.jsx)(n.td,{children:"Filters values"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"debounce"})}),(0,r.jsx)(n.td,{children:"Delays values"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mapAsync"})}),(0,r.jsx)(n.td,{children:"Maps to async values with loading"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"merge"})}),(0,r.jsx)(n.td,{children:"Merges multiple sources"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);